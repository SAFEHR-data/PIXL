#  Copyright (c) 2022 University College London Hospitals NHS Foundation Trust
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
from __future__ import annotations

import datetime

import pytest
from core.db.models import Extract, Image
from pixl_dcmd._database import (
    get_unexported_image,
    get_uniq_pseudo_study_uid_and_update_db,
    get_pseudo_patient_id_and_update_db,
)
from pixl_dcmd._dicom_helpers import StudyInfo
from sqlalchemy.orm import Session

STUDY_DATE = datetime.date.fromisoformat("2023-01-01")
TEST_PROJECT_SLUG = "test-extract-uclh-omop-cdm"
TEST_STUDY_INFO = StudyInfo(
    mrn="123456", accession_number="abcde", study_uid="1.2.3.4.5", pseudo_patient_id="9"
)
TEST_STUDY_INFO_WITH_PSEUDO_UID = StudyInfo(
    mrn="234567", accession_number="bcdef", study_uid="2.3.4.5.6", pseudo_patient_id="0"
)
TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID = StudyInfo(
    mrn="234567", accession_number="bcdef", study_uid="2.3.4.5.6", pseudo_patient_id="0"
)


@pytest.fixture()
def rows_for_database_testing(db_session) -> Session:
    """
    Insert a test row for the fake DICOM dataset generated by
    pytest_pixl.dicom.generate_dicom_dataset.
    """
    extract = Extract(slug=TEST_PROJECT_SLUG)

    existing_image = Image(
        mrn=TEST_STUDY_INFO.mrn,
        accession_number=TEST_STUDY_INFO.accession_number,
        study_uid=TEST_STUDY_INFO.study_uid,
        study_date=STUDY_DATE,
        extract=extract,
    )

    existing_image_with_pseudo_study_uid = Image(
        mrn=TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID.mrn,
        accession_number=TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID.accession_number,
        study_uid=TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID.study_uid,
        study_date=STUDY_DATE,
        extract=extract,
        # This should be a valid VR UI value!
        # https://dicom.nema.org/medical/dicom/current/output/html/part05.html#table_6.2-1
        pseudo_study_uid="0.0.0.0.0.0",
        pseudo_patient_id=TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID.pseudo_patient_id,
    )

    with db_session:
        db_session.add_all(
            [extract, existing_image, existing_image_with_pseudo_study_uid]
        )
        db_session.commit()

    return db_session


def test_get_uniq_pseudo_study_uid_and_update_db(rows_for_database_testing, db_session):
    """
    GIVEN an existing image that already has a pseudo_study_uid
    WHEN we query the database for that image
    THEN the function should return the existing pseudo_study_uid.
    """
    pseudo_study_uid = get_uniq_pseudo_study_uid_and_update_db(
        TEST_PROJECT_SLUG, TEST_STUDY_INFO_WITH_PSEUDO_UID
    )
    assert pseudo_study_uid == "0.0.0.0.0.0"


def test_get_pseudo_patient_id_and_update_db(rows_for_database_testing, db_session):
    """
    GIVEN an exixting image that already has pseudo_patient_id
    WHEN we query the dataset for that image
    THEN the funcion should return the existing pseudo_patient_id
    """
    get_pseudo_patient_id_and_update_db(
        TEST_PROJECT_SLUG, TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID
    )
    result = get_unexported_image(
        TEST_PROJECT_SLUG, TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID, db_session
    )
    assert (
        result.pseudo_patient_id
        == TEST_STUDY_INFO_WITH_PSEUDO_PATIENT_UID.pseudo_patient_id
    )


def test_get_unexported_image_fallback(rows_for_database_testing, db_session):
    """
    GIVEN a database entry with a non-exported image
    WHEN we query that image with a non-matching study UID
    THEN the querying should fall back to querying on MRN and accession number and return the image.
    """
    wrong_uid_info = StudyInfo(
        mrn="123456",
        accession_number="abcde",
        study_uid="nope",
        pseudo_patient_id="None",
    )
    result = get_unexported_image(TEST_PROJECT_SLUG, wrong_uid_info, db_session)
    assert result.study_uid == TEST_STUDY_INFO.study_uid


def test_no_pseudo_patient_id(rows_for_database_testing, db_session) -> None:
    """
    GIVEN the database has a single Export entity, with one exported Image, one un-exported Image
    WHEN we parse a file with duplicated entries the two existing images and one new image
    THEN the database should have 3 Images, with two message returned.
    """

    get_pseudo_patient_id_and_update_db(TEST_PROJECT_SLUG, TEST_STUDY_INFO)
    result = get_unexported_image(TEST_PROJECT_SLUG, TEST_STUDY_INFO, db_session)
    assert result.pseudo_patient_id == TEST_STUDY_INFO.pseudo_patient_id
